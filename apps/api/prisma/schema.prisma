generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  staff
}

enum StockLedgerType {
  RECEIPT
  ISSUE
  ADJUST
  TRANSFER_IN
  TRANSFER_OUT
}

enum StockLedgerRefType {
  PO
  SO
  ADJ
  TX
}

enum OrderStatus {
  DRAFT
  OPEN
  RECEIVED
  FULFILLED
  CLOSED
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  timezone  String   @default("Asia/Manila")
  currency  String   @default("PHP")
  users     User[]
  warehouses Warehouse[]
  products  Product[]
  inventories InventoryBalance[]
  stockLedgers StockLedger[]
  purchaseOrders PurchaseOrder[]
  salesOrders SalesOrder[]
  transfers Transfer[]
  deviceStates DeviceSyncState[]
  auditLogs  AuditLog[]
  createdAt DateTime @default(now())
}

model User {
  id           String   @id @default(uuid())
  orgId        String
  email        String   @unique
  passwordHash String
  role         UserRole @default(staff)
  createdAt    DateTime @default(now())
  tenant       Tenant   @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Warehouse {
  id       String   @id @default(uuid())
  orgId    String
  name     String
  code     String
  address  String?
  tenant   Tenant   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  inventory InventoryBalance[]
  stockLedgers StockLedger[]
  transfersFrom Transfer[] @relation("TransferFromWarehouse")
  transfersTo   Transfer[] @relation("TransferToWarehouse")

  @@unique([orgId, code])
}

model Product {
  id        String   @id @default(uuid())
  orgId     String
  name      String
  sku       String
  barcode   String?
  uom       String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  inventory InventoryBalance[]
  stockLedgers StockLedger[]
  poItems   PurchaseOrderItem[]
  soItems   SalesOrderItem[]
  transferItems TransferItem[]

  @@unique([orgId, sku])
  @@index([name])
  @@index([barcode])
}

model InventoryBalance {
  id          String   @id @default(uuid())
  orgId       String
  warehouseId String
  productId   String
  qty         Decimal  @default(0.0)
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orgId, warehouseId, productId])
  @@index([warehouseId])
  @@index([productId])
}

model StockLedger {
  id          String            @id @default(uuid())
  orgId       String
  type        StockLedgerType
  warehouseId String
  productId   String
  qty         Decimal
  refType     StockLedgerRefType
  refId       String
  createdAt   DateTime           @default(now())
  tenant      Tenant             @relation(fields: [orgId], references: [id], onDelete: Cascade)
  warehouse   Warehouse          @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  product     Product            @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([productId])
}

model PurchaseOrder {
  id           String              @id @default(uuid())
  orgId        String
  supplierName String
  status       OrderStatus @default(DRAFT)
  createdAt    DateTime @default(now())
  tenant       Tenant @relation(fields: [orgId], references: [id], onDelete: Cascade)
  items        PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id        String   @id @default(uuid())
  poId      String
  productId String
  qty       Decimal
  unitPrice Decimal @default(0.0)
  order     PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model SalesOrder {
  id           String       @id @default(uuid())
  orgId        String
  customerName String
  status       OrderStatus @default(DRAFT)
  createdAt    DateTime @default(now())
  tenant       Tenant @relation(fields: [orgId], references: [id], onDelete: Cascade)
  items        SalesOrderItem[]
}

model SalesOrderItem {
  id        String   @id @default(uuid())
  soId      String
  productId String
  qty       Decimal
  unitPrice Decimal @default(0.0)
  order     SalesOrder @relation(fields: [soId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Transfer {
  id              String   @id @default(uuid())
  orgId           String
  fromWarehouseId String
  toWarehouseId   String
  createdAt       DateTime @default(now())
  tenant          Tenant   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  fromWarehouse   Warehouse @relation("TransferFromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse     Warehouse @relation("TransferToWarehouse", fields: [toWarehouseId], references: [id])
  items           TransferItem[]
}

model TransferItem {
  id         String   @id @default(uuid())
  transferId String
  productId  String
  qty        Decimal
  transfer   Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DeviceSyncState {
  id           String   @id @default(uuid())
  orgId        String
  deviceId     String
  lastSyncedAt DateTime
  serverClock  DateTime
  tenant       Tenant   @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, deviceId])
}

model AuditLog {
  id        String   @id @default(uuid())
  orgId     String
  entity    String
  entityId  String
  action    String
  payload   Json
  createdAt DateTime @default(now())
  userId    String?
  tenant    Tenant?  @relation(fields: [orgId], references: [id], onDelete: Cascade)
}
